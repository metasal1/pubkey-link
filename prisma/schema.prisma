generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bot {
  id           String          @id @default(cuid())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  name         String          @unique
  avatarUrl    String?
  status       BotStatus       @default(Active)
  token        String /// @encrypted
  clientId     String /// @encrypted
  clientSecret String /// @encrypted
  community    Community       @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId  String          @unique
  permissions  BotPermission[]
  members      BotMember[]
  logs         Log[]
}

model BotMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bot       Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
  botId     String
  userId    String
  serverId  String

  identity         Identity         @relation(fields: [identityProvider, userId], references: [provider, providerId], onDelete: Cascade)
  identityProvider IdentityProvider @default(Discord)

  @@unique([botId, userId, serverId])
}

model BotPermission {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  bot       Bot              @relation(fields: [botId], references: [id], onDelete: Cascade)
  botId     String
  serverId  String
  roleId    String
  rules     RulePermission[]

  @@unique([botId, serverId, roleId])
}

model Community {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  name        String
  avatarUrl   String?
  description String?
  websiteUrl  String?
  discordUrl  String?
  githubUrl   String?
  twitterUrl  String?
  telegramUrl String?
  members     CommunityMember[]
  rules       Rule[]
  cluster     NetworkCluster
  bot         Bot?
  logs        Log[]

  @@unique([name])
}

model CommunityMember {
  id          String                @id @default(cuid())
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  role        CommunityRole
  community   Community             @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  rules       CommunityMemberRule[]

  @@unique([communityId, userId])
}

model CommunityMemberRule {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  member    CommunityMember @relation(fields: [memberId], references: [id])
  memberId  String
  rule      Rule            @relation(fields: [ruleId], references: [id])
  ruleId    String
}

model Identity {
  id           String              @id @default(cuid())
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  provider     IdentityProvider
  providerId   String
  name         String?
  accessToken  String? /// @encrypted
  refreshToken String? /// @encrypted
  profile      Json?
  verified     Boolean             @default(false)
  owner        User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  challenges   IdentityChallenge[]
  bots         BotMember[]
  logs         Log[]

  @@unique([provider, providerId])
}

model IdentityChallenge {
  id         String           @id @default(cuid())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  challenge  String           @unique
  signature  String?
  ip         String
  userAgent  String
  verified   Boolean          @default(false)
  identity   Identity         @relation(fields: [provider, providerId], references: [provider, providerId], onDelete: Cascade)
  provider   IdentityProvider
  providerId String
}

model Log {
  id                 String            @id @default(cuid())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  message            String
  data               Json?
  level              LogLevel
  relatedId          String?
  relatedType        LogRelatedType?
  community          Community?        @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId        String?
  identity           Identity?         @relation(fields: [identityProvider, identityProviderId], references: [provider, providerId], onDelete: Cascade)
  identityProvider   IdentityProvider?
  identityProviderId String?
  bot                Bot?              @relation(fields: [botId], references: [id], onDelete: Cascade)
  botId              String?
  networkAsset       NetworkAsset?     @relation(fields: [networkAssetId], references: [id], onDelete: Cascade)
  networkAssetId     String?
  user               User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String?
  rule               Rule?             @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  ruleId             String?
}

model Network {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  cluster   NetworkCluster @unique
  type      NetworkType
  name      String         @unique
  endpoint  String
  assets    NetworkAsset[]
  tokens    NetworkToken[]
}

model NetworkAsset {
  id         String           @id @default(cuid())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  network    Network          @relation(fields: [cluster], references: [cluster])
  cluster    NetworkCluster
  type       NetworkTokenType
  account    String
  group      String?
  name       String
  symbol     String?
  balance    String?
  decimals   Int
  mint       String
  owner      String
  program    String?
  imageUrl   String?
  metadata   Json?
  attributes Json?
  logs       Log[]

  @@unique([account, cluster])
  @@index([cluster, owner, type])
}

model NetworkToken {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  network     Network          @relation(fields: [cluster], references: [cluster])
  cluster     NetworkCluster
  type        NetworkTokenType
  name        String
  account     String
  program     String
  imageUrl    String?
  metadataUrl String?
  description String?
  symbol      String?
  raw         Json?
  conditions  RuleCondition[]

  @@unique([account, cluster])
}

model Rule {
  id          String                @id @default(cuid())
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  community   Community             @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
  name        String
  description String?
  conditions  RuleCondition[]
  permissions RulePermission[]
  members     CommunityMemberRule[]
  logs        Log[]
}

model RuleCondition {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  type      RuleConditionType
  account   String?
  amount    String?
  config    Json?
  filters   Json?
  name      String
  token     NetworkToken?     @relation(fields: [tokenId], references: [id])
  tokenId   String?
  rule      Rule              @relation(fields: [ruleId], references: [id])
  ruleId    String
}

model RulePermission {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  rule      Rule           @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  ruleId    String
  bot       BotPermission? @relation(fields: [botId], references: [id], onDelete: Cascade)
  botId     String?

  @@unique([ruleId, botId])
}

model User {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  avatarUrl   String?
  developer   Boolean           @default(false)
  name        String?
  password    String? /// @encrypted
  role        UserRole          @default(User)
  status      UserStatus        @default(Created)
  username    String            @unique
  communities CommunityMember[]
  identities  Identity[]
  logs        Log[]
}

enum BotStatus {
  Active
  Inactive
}

enum CommunityRole {
  Admin
  Member
}

enum IdentityProvider {
  Discord
  GitHub
  Google
  Solana
  Twitter
}

enum LogLevel {
  Info
  Warning
  Error
}

enum LogRelatedType {
  Bot
  Community
  Identity
  Rule
  User
}

enum NetworkCluster {
  SolanaCustom
  SolanaDevnet
  SolanaMainnet
  SolanaTestnet
}

enum NetworkTokenType {
  Fungible
  NonFungible
  Unknown
}

enum NetworkType {
  Solana
}

enum RuleConditionType {
  AnybodiesAsset
  SolanaFungibleAsset
  SolanaNonFungibleAsset
}

enum UserRole {
  Admin
  User
}

enum UserStatus {
  Active
  Created
  Inactive
}
