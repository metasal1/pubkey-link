// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`api-feature generator should generate the feature libraries 1`] = `
"import {
  AdminCreateTestInput,
  AdminFindManyTestInput,
  AdminUpdateTestInput,
  Test,
} from '@proj/sdk';
import { getAliceCookie, getBobCookie, sdk, uniqueId } from '../support';

describe('api-test-feature', () => {
  describe('api-test-admin-resolver', () => {
    const testName = uniqueId('acme-test');
    let testId: string;
    let cookie: string;

    beforeAll(async () => {
      cookie = await getAliceCookie();
      const created = await sdk.adminCreateTest(
        { input: { name: testName } },
        { cookie }
      );
      testId = created.data.created.id;
    });

    describe('authorized', () => {
      beforeAll(async () => {
        cookie = await getAliceCookie();
      });

      it('should create a test', async () => {
        const input: AdminCreateTestInput = {
          name: uniqueId('test'),
        };

        const res = await sdk.adminCreateTest({ input }, { cookie });

        const item: Test = res.data.created;
        expect(item.name).toBe(input.name);
        expect(item.id).toBeDefined();
        expect(item.createdAt).toBeDefined();
        expect(item.updatedAt).toBeDefined();
      });

      it('should update a test', async () => {
        const createInput: AdminCreateTestInput = {
          name: uniqueId('test'),
        };
        const createdRes = await sdk.adminCreateTest(
          { input: createInput },
          { cookie }
        );
        const testId = createdRes.data.created.id;
        const input: AdminUpdateTestInput = {
          name: uniqueId('test'),
        };

        const res = await sdk.adminUpdateTest({ testId, input }, { cookie });

        const item: Test = res.data.updated;
        expect(item.name).toBe(input.name);
      });

      it('should find a list of tests (find all)', async () => {
        const createInput: AdminCreateTestInput = {
          name: uniqueId('test'),
        };
        const createdRes = await sdk.adminCreateTest(
          { input: createInput },
          { cookie }
        );
        const testId = createdRes.data.created.id;

        const input: AdminFindManyTestInput = {};

        const res = await sdk.adminFindManyTest({ input }, { cookie });

        expect(res.data.paging.meta.totalCount).toBeGreaterThan(1);
        expect(res.data.paging.data.length).toBeGreaterThan(1);
        // First item should be the one we created above
        expect(res.data.paging.data[0].id).toBe(testId);
      });

      it('should find a list of tests (find new one)', async () => {
        const createInput: AdminCreateTestInput = {
          name: uniqueId('test'),
        };
        const createdRes = await sdk.adminCreateTest(
          { input: createInput },
          { cookie }
        );
        const testId = createdRes.data.created.id;

        const input: AdminFindManyTestInput = {
          search: testId,
        };

        const res = await sdk.adminFindManyTest({ input }, { cookie });

        expect(res.data.paging.meta.totalCount).toBe(1);
        expect(res.data.paging.data.length).toBe(1);
        expect(res.data.paging.data[0].id).toBe(testId);
      });

      it('should find a test by id', async () => {
        const createInput: AdminCreateTestInput = {
          name: uniqueId('test'),
        };
        const createdRes = await sdk.adminCreateTest(
          { input: createInput },
          { cookie }
        );
        const testId = createdRes.data.created.id;

        const res = await sdk.adminFindOneTest({ testId }, { cookie });

        expect(res.data.item.id).toBe(testId);
      });

      it('should delete a test', async () => {
        const createInput: AdminCreateTestInput = {
          name: uniqueId('test'),
        };
        const createdRes = await sdk.adminCreateTest(
          { input: createInput },
          { cookie }
        );
        const testId = createdRes.data.created.id;

        const res = await sdk.adminDeleteTest({ testId }, { cookie });

        expect(res.data.deleted).toBe(true);

        const findRes = await sdk.adminFindManyTest(
          { input: { search: testId } },
          { cookie }
        );
        expect(findRes.data.paging.meta.totalCount).toBe(0);
        expect(findRes.data.paging.data.length).toBe(0);
      });
    });

    describe('unauthorized', () => {
      let cookie: string;
      beforeAll(async () => {
        cookie = await getBobCookie();
      });

      it('should not create a test', async () => {
        expect.assertions(1);
        const input: AdminCreateTestInput = {
          name: uniqueId('test'),
        };

        try {
          await sdk.adminCreateTest({ input }, { cookie });
        } catch (e) {
          expect(e.message).toBe('Unauthorized: User is not Admin');
        }
      });

      it('should not update a test', async () => {
        expect.assertions(1);
        try {
          await sdk.adminUpdateTest({ testId, input: {} }, { cookie });
        } catch (e) {
          expect(e.message).toBe('Unauthorized: User is not Admin');
        }
      });

      it('should not find a list of tests (find all)', async () => {
        expect.assertions(1);
        try {
          await sdk.adminFindManyTest({ input: {} }, { cookie });
        } catch (e) {
          expect(e.message).toBe('Unauthorized: User is not Admin');
        }
      });

      it('should not find a test by id', async () => {
        expect.assertions(1);
        try {
          await sdk.adminFindOneTest({ testId }, { cookie });
        } catch (e) {
          expect(e.message).toBe('Unauthorized: User is not Admin');
        }
      });

      it('should not delete a test', async () => {
        expect.assertions(1);
        try {
          await sdk.adminDeleteTest({ testId }, { cookie });
        } catch (e) {
          expect(e.message).toBe('Unauthorized: User is not Admin');
        }
      });
    });
  });
});
"
`;

exports[`api-feature generator should generate the feature libraries 2`] = `
"export * from './lib/api-test-data-access.module';
export * from './lib/api-test.service';
export * from './lib/entity/test.entity';
export * from './lib/entity/test-paging.entity';
export * from './lib/dto/admin-create-test.input';
export * from './lib/dto/admin-find-many-test.input';
export * from './lib/dto/admin-update-test.input';
"
`;

exports[`api-feature generator should generate the feature libraries 3`] = `
"import { Injectable } from '@nestjs/common';
import { ApiCoreService } from '@proj/api-core-data-access';
import { AdminCreateTestInput } from './dto/admin-create-test.input';
import { AdminFindManyTestInput } from './dto/admin-find-many-test.input';
import { AdminUpdateTestInput } from './dto/admin-update-test.input';
import { TestPaging } from './entity/test-paging.entity';
import { getAdminTestWhereInput } from './helpers/get-admin-test-where.input';

@Injectable()
export class ApiAdminTestService {
  constructor(private readonly core: ApiCoreService) {}

  async createTest(input: AdminCreateTestInput) {
    return this.core.data.test.create({ data: input });
  }

  async deleteTest(testId: string) {
    const deleted = await this.core.data.test.delete({ where: { id: testId } });
    return !!deleted;
  }

  async findManyTest(input: AdminFindManyTestInput): Promise<TestPaging> {
    return this.core.data.test
      .paginate({
        orderBy: { createdAt: 'desc' },
        where: getAdminTestWhereInput(input),
      })
      .withPages({ limit: input.limit, page: input.page })
      .then(([data, meta]) => ({ data, meta }));
  }

  async findOneTest(testId: string) {
    return this.core.data.test.findUnique({ where: { id: testId } });
  }

  async updateTest(testId: string, input: AdminUpdateTestInput) {
    return this.core.data.test.update({ where: { id: testId }, data: input });
  }
}
"
`;

exports[`api-feature generator should generate the feature libraries 4`] = `
"import { Module } from '@nestjs/common';
import { ApiCoreDataAccessModule } from '@proj/api-core-data-access';
import { ApiAdminTestService } from './api-admin-test.service';

import { ApiTestService } from './api-test.service';

@Module({
  imports: [ApiCoreDataAccessModule],
  providers: [ApiTestService, ApiAdminTestService],
  exports: [ApiTestService],
})
export class ApiTestDataAccessModule {}
"
`;

exports[`api-feature generator should generate the feature libraries 5`] = `
"import { Injectable } from '@nestjs/common';
import { ApiAdminTestService } from './api-admin-test.service';

@Injectable()
export class ApiTestService {
  constructor(readonly admin: ApiAdminTestService) {}
}
"
`;

exports[`api-feature generator should generate the feature libraries 6`] = `
"import { Field, InputType } from '@nestjs/graphql';

@InputType()
export class AdminCreateTestInput {
  @Field()
  name!: string;
}
"
`;

exports[`api-feature generator should generate the feature libraries 7`] = `
"import { Field, InputType } from '@nestjs/graphql';
import { PagingInput } from '@proj/api-core-data-access';

@InputType()
export class AdminFindManyTestInput extends PagingInput() {
  @Field({ nullable: true })
  search?: string;
}
"
`;

exports[`api-feature generator should generate the feature libraries 8`] = `
"import { Field, InputType } from '@nestjs/graphql';

@InputType()
export class AdminUpdateTestInput {
  @Field({ nullable: true })
  name?: string;
}
"
`;

exports[`api-feature generator should generate the feature libraries 9`] = `
"import { Prisma } from '@prisma/client';
import { AdminFindManyTestInput } from '../dto/admin-find-many-test.input';

export function getAdminTestWhereInput(
  input: AdminFindManyTestInput
): Prisma.TestWhereInput {
  const where: Prisma.TestWhereInput = {};

  if (input.search) {
    where.OR = [
      { id: { contains: input.search, mode: 'insensitive' } },
      { name: { contains: input.search, mode: 'insensitive' } },
    ];
  }

  return where;
}
"
`;

exports[`api-feature generator should generate the feature libraries 10`] = `
"import { Field, ObjectType } from '@nestjs/graphql';

@ObjectType()
export class Test {
  @Field()
  id!: string;
  @Field({ nullable: true })
  createdAt?: Date;
  @Field({ nullable: true })
  updatedAt?: Date;
  @Field()
  name!: string;
}
"
`;

exports[`api-feature generator should generate the feature libraries 11`] = `
"import { ObjectType } from '@nestjs/graphql';
import { PagingResponse } from '@proj/api-core-data-access';
import { Test } from './test.entity';

@ObjectType()
export class TestPaging extends PagingResponse<Test>(Test) {}
"
`;

exports[`api-feature generator should generate the feature libraries 12`] = `
"export * from './lib/api-test-feature.module';
"
`;

exports[`api-feature generator should generate the feature libraries 13`] = `
"import { Resolver } from '@nestjs/graphql';
import { ApiTestService } from '@proj/api-test-data-access';
import { ApiAuthGraphQLAdminGuard } from '@proj/api-auth-data-access';
import { Mutation, Query, Args } from '@nestjs/graphql';
import { UseGuards } from '@nestjs/common';
import {
  AdminCreateTestInput,
  AdminFindManyTestInput,
  Test,
  TestPaging,
  AdminUpdateTestInput,
} from '@proj/api-test-data-access';

@Resolver()
@UseGuards(ApiAuthGraphQLAdminGuard)
export class ApiAdminTestResolver {
  constructor(private readonly service: ApiTestService) {}

  @Mutation(() => Test, { nullable: true })
  adminCreateTest(@Args('input') input: AdminCreateTestInput) {
    return this.service.admin.createTest(input);
  }

  @Mutation(() => Boolean, { nullable: true })
  adminDeleteTest(@Args('testId') testId: string) {
    return this.service.admin.deleteTest(testId);
  }

  @Query(() => TestPaging)
  adminFindManyTest(@Args('input') input: AdminFindManyTestInput) {
    return this.service.admin.findManyTest(input);
  }

  @Query(() => Test, { nullable: true })
  adminFindOneTest(@Args('testId') testId: string) {
    return this.service.admin.findOneTest(testId);
  }

  @Mutation(() => Test, { nullable: true })
  adminUpdateTest(
    @Args('testId') testId: string,
    @Args('input') input: AdminUpdateTestInput
  ) {
    return this.service.admin.updateTest(testId, input);
  }
}
"
`;

exports[`api-feature generator should generate the feature libraries 14`] = `
"import { Module } from '@nestjs/common';
import { ApiTestDataAccessModule } from '@proj/api-test-data-access';
import { ApiAdminTestResolver } from './api-admin-test.resolver';

@Module({
  imports: [ApiTestDataAccessModule],
  providers: [ApiAdminTestResolver],
})
export class ApiTestFeatureModule {}
"
`;
