# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AdminCreateBotInput {
  clientId: String!
  clientSecret: String!
  communityId: String!
  token: String!
}

input AdminCreateCommunityInput {
  avatarUrl: String
  cluster: NetworkCluster!
  description: String
  discordUrl: String
  githubUrl: String
  name: String!
  telegramUrl: String
  twitterUrl: String
  websiteUrl: String
}

input AdminCreateCommunityMemberInput {
  communityId: String!
  role: CommunityRole!
  userId: String!
}

input AdminCreateIdentityInput {
  ownerId: String!
  provider: IdentityProvider!
  providerId: String!
}

input AdminCreateNetworkInput {
  cluster: NetworkCluster!
  endpoint: String!
  name: String!
  type: NetworkType!
}

input AdminCreateNetworkTokenInput {
  account: String!
  cluster: NetworkCluster!
}

input AdminCreateRuleInput {
  communityId: String!
  description: String
  name: String!
}

input AdminCreateUserInput {
  password: String
  username: String!
}

input AdminFindManyBotInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input AdminFindManyCommunityInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input AdminFindManyCommunityMemberInput {
  communityId: String!
  limit: Int = 10
  page: Int = 1
  role: CommunityRole
  search: String
}

input AdminFindManyIdentityInput {
  ownerId: String
  provider: IdentityProvider
}

input AdminFindManyNetworkInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input AdminFindManyNetworkTokenInput {
  cluster: NetworkCluster!
  limit: Int = 10
  page: Int = 1
  search: String
}

input AdminFindManyRuleInput {
  communityId: String!
  limit: Int = 10
  page: Int = 1
  search: String
}

input AdminFindManyUserInput {
  limit: Int = 10
  page: Int = 1
  role: UserRole
  search: String
  status: UserStatus
}

input AdminUpdateBotInput {
  avatarUrl: String
  clientId: String
  clientSecret: String
  communityId: String
  name: String
  token: String
}

input AdminUpdateCommunityInput {
  avatarUrl: String
  description: String
  discordUrl: String
  githubUrl: String
  name: String
  telegramUrl: String
  twitterUrl: String
  websiteUrl: String
}

input AdminUpdateCommunityMemberInput {
  role: CommunityRole!
}

input AdminUpdateNetworkInput {
  endpoint: String
  name: String
}

input AdminUpdateNetworkTokenInput {
  name: String
}

input AdminUpdateRuleInput {
  description: String
  name: String
}

input AdminUpdateUserInput {
  avatarUrl: String
  developer: Boolean
  name: String
  role: UserRole
  status: UserStatus
  username: String
}

type AppConfig {
  authDiscordEnabled: Boolean!
  authGithubEnabled: Boolean!
  authGoogleEnabled: Boolean!
  authPasswordEnabled: Boolean!
  authRegisterEnabled: Boolean!
  authSolanaEnabled: Boolean!
  authTwitterEnabled: Boolean!
}

type Bot {
  application: JSON
  avatarUrl: String
  communityId: String!
  createdAt: DateTime
  developersUrl: String!
  id: String!
  inviteUrl: String!
  name: String!
  redirectUrl: String!
  redirectUrlSet: Boolean
  started: Boolean!
  status: BotStatus!
  updatedAt: DateTime
  verificationUrl: String!
  verificationUrlSet: Boolean
}

type BotPaging {
  data: [Bot!]!
  meta: PagingMeta!
}

enum BotStatus {
  Active
  Inactive
}

type Community {
  avatarUrl: String
  cluster: NetworkCluster!
  createdAt: DateTime
  description: String
  discordUrl: String
  githubUrl: String
  id: String!
  name: String!
  telegramUrl: String
  twitterUrl: String
  updatedAt: DateTime
  websiteUrl: String
}

type CommunityMember {
  communityId: String!
  createdAt: DateTime
  id: String!
  role: CommunityRole!
  updatedAt: DateTime
  user: User
  userId: String!
}

type CommunityMemberPaging {
  data: [CommunityMember!]!
  meta: PagingMeta!
}

type CommunityPaging {
  data: [Community!]!
  meta: PagingMeta!
}

enum CommunityRole {
  Admin
  Member
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DiscordServer {
  icon: String
  id: String!
  name: String!
  permissions: [String!]
}

type DiscordServerRole {
  color: Int!
  id: String!
  managed: Boolean!
  name: String!
  position: Int!
}

type Identity {
  avatarUrl: String
  challenges: [IdentityChallenge!]
  createdAt: DateTime
  expired: Boolean
  id: String!
  name: String
  owner: User
  profile: JSON
  provider: IdentityProvider!
  providerId: String!
  updatedAt: DateTime
  url: String
  verified: Boolean
}

type IdentityChallenge {
  challenge: String!
  createdAt: DateTime!
  id: String!
  ip: String!
  provider: IdentityProvider!
  providerId: String!
  signature: String
  updatedAt: DateTime!
  userAgent: String!
  verified: Boolean!
}

enum IdentityProvider {
  Discord
  GitHub
  Google
  Solana
  Twitter
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LinkIdentityInput {
  provider: IdentityProvider!
  providerId: String!
}

input LoginInput {
  password: String!
  username: String!
}

type Mutation {
  adminCreateBot(input: AdminCreateBotInput!): Bot
  adminCreateCommunity(input: AdminCreateCommunityInput!): Community
  adminCreateCommunityMember(input: AdminCreateCommunityMemberInput!): CommunityMember
  adminCreateIdentity(input: AdminCreateIdentityInput!): Identity
  adminCreateNetwork(input: AdminCreateNetworkInput!): Network
  adminCreateNetworkToken(input: AdminCreateNetworkTokenInput!): NetworkToken
  adminCreateRule(input: AdminCreateRuleInput!): Rule
  adminCreateUser(input: AdminCreateUserInput!): User
  adminDeleteBot(botId: String!): Boolean
  adminDeleteCommunity(communityId: String!): Boolean
  adminDeleteCommunityMember(communityMemberId: String!): Boolean
  adminDeleteIdentity(identityId: String!): Boolean
  adminDeleteNetwork(networkId: String!): Boolean
  adminDeleteNetworkToken(networkTokenId: String!): Boolean
  adminDeleteRule(ruleId: String!): Boolean
  adminDeleteUser(userId: String!): Boolean
  adminUpdateBot(botId: String!, input: AdminUpdateBotInput!): Bot
  adminUpdateCommunity(communityId: String!, input: AdminUpdateCommunityInput!): Community
  adminUpdateCommunityMember(communityMemberId: String!, input: AdminUpdateCommunityMemberInput!): CommunityMember
  adminUpdateNetwork(input: AdminUpdateNetworkInput!, networkId: String!): Network
  adminUpdateNetworkToken(input: AdminUpdateNetworkTokenInput!, networkTokenId: String!): NetworkToken
  adminUpdateRule(input: AdminUpdateRuleInput!, ruleId: String!): Rule
  adminUpdateUser(input: AdminUpdateUserInput!, userId: String!): User
  anonVerifyIdentityChallenge(input: VerifyIdentityChallengeInput!): IdentityChallenge
  login(input: LoginInput!): User
  logout: Boolean
  register(input: RegisterInput!): User
  userCreateBot(input: UserCreateBotInput!): Bot
  userCreateCommunity(input: UserCreateCommunityInput!): Community
  userCreateCommunityMember(input: UserCreateCommunityMemberInput!): CommunityMember
  userCreateRule(input: UserCreateRuleInput!): Rule
  userDeleteBot(botId: String!): Boolean
  userDeleteCommunity(communityId: String!): Boolean
  userDeleteCommunityMember(communityMemberId: String!): Boolean
  userDeleteIdentity(identityId: String!): Boolean
  userDeleteRule(ruleId: String!): Boolean
  userLeaveBotServer(botId: String!, serverId: String!): Boolean
  userLinkIdentity(input: LinkIdentityInput!): Identity
  userStartBot(botId: String!): Boolean
  userStopBot(botId: String!): Boolean
  userUpdateBot(botId: String!, input: UserUpdateBotInput!): Bot
  userUpdateCommunity(communityId: String!, input: UserUpdateCommunityInput!): Community
  userUpdateCommunityMember(communityMemberId: String!, input: UserUpdateCommunityMemberInput!): CommunityMember
  userUpdateRule(input: UserUpdateRuleInput!, ruleId: String!): Rule
  userUpdateUser(input: UserUpdateUserInput!): User
  userValidateRule(address: String!, ruleId: String!): [RuleCondition!]
  userVerifyIdentityChallenge(input: VerifyIdentityChallengeInput!): IdentityChallenge
}

type Network {
  cluster: NetworkCluster!
  createdAt: DateTime
  decimals: Int!
  endpoint: String!
  explorerUrl: String!
  id: String!
  name: String!
  symbol: String!
  type: NetworkType!
  updatedAt: DateTime
}

type NetworkAsset {
  accounts: [String!]!
  amount: String!
  owner: String!
}

enum NetworkCluster {
  SolanaCustom
  SolanaDevnet
  SolanaMainnet
  SolanaTestnet
}

type NetworkPaging {
  data: [Network!]!
  meta: PagingMeta!
}

type NetworkToken {
  account: String!
  cluster: NetworkCluster!
  createdAt: DateTime
  description: String
  id: String!
  imageUrl: String
  metadataUrl: String
  name: String!
  program: String!
  raw: JSON
  symbol: String
  type: NetworkTokenType!
  updatedAt: DateTime
}

type NetworkTokenPaging {
  data: [NetworkToken!]!
  meta: PagingMeta!
}

enum NetworkTokenType {
  Fungible
  NonFungible
  Unknown
}

enum NetworkType {
  Solana
}

type PagingMeta {
  currentPage: Int!
  isFirstPage: Boolean!
  isLastPage: Boolean!
  nextPage: Int
  pageCount: Int
  previousPage: Int
  totalCount: Int
}

type Query {
  adminFindManyBot(input: AdminFindManyBotInput!): BotPaging!
  adminFindManyCommunity(input: AdminFindManyCommunityInput!): CommunityPaging!
  adminFindManyCommunityMember(input: AdminFindManyCommunityMemberInput!): CommunityMemberPaging!
  adminFindManyIdentity(input: AdminFindManyIdentityInput!): [Identity!]
  adminFindManyNetwork(input: AdminFindManyNetworkInput!): NetworkPaging!
  adminFindManyNetworkToken(input: AdminFindManyNetworkTokenInput!): NetworkTokenPaging!
  adminFindManyRule(input: AdminFindManyRuleInput!): RulePaging!
  adminFindManyUser(input: AdminFindManyUserInput!): UserPaging!
  adminFindOneBot(botId: String!): Bot
  adminFindOneCommunity(communityId: String!): Community
  adminFindOneCommunityMember(communityMemberId: String!): CommunityMember
  adminFindOneNetwork(networkId: String!): Network
  adminFindOneNetworkToken(networkTokenId: String!): NetworkToken
  adminFindOneRule(ruleId: String!): Rule
  adminFindOneUser(userId: String!): User
  anonFindUserByIdentity(provider: IdentityProvider!, providerId: String!): User
  anonRequestIdentityChallenge(input: RequestIdentityChallengeInput!): IdentityChallenge
  appConfig: AppConfig!
  me: User
  uptime: Float!
  userFindManyCommunity(input: UserFindManyCommunityInput!): CommunityPaging!
  userFindManyCommunityMember(input: UserFindManyCommunityMemberInput!): CommunityMemberPaging!
  userFindManyIdentity(input: UserFindManyIdentityInput!): [Identity!]
  userFindManyNetworkToken(input: UserFindManyNetworkTokenInput!): NetworkTokenPaging!
  userFindManyRule(input: UserFindManyRuleInput!): RulePaging!
  userFindManyUser(input: UserFindManyUserInput!): UserPaging!
  userFindOneBot(communityId: String!): Bot
  userFindOneCommunity(communityId: String!): Community
  userFindOneCommunityMember(communityMemberId: String!): CommunityMember
  userFindOneRule(ruleId: String!): Rule
  userFindOneUser(username: String!): User
  userGetBotRoles(botId: String!, serverId: String!): [DiscordServerRole!]
  userGetBotServer(botId: String!, serverId: String!): DiscordServer
  userGetBotServers(botId: String!): [DiscordServer!]
  userRequestIdentityChallenge(input: RequestIdentityChallengeInput!): IdentityChallenge
}

input RegisterInput {
  password: String!
  username: String!
}

input RequestIdentityChallengeInput {
  provider: IdentityProvider!
  providerId: String!
}

type Rule {
  communityId: String!
  conditions: [RuleCondition!]
  createdAt: DateTime
  description: String
  id: String!
  name: String!
  updatedAt: DateTime
}

type RuleCondition {
  account: String
  amount: String
  asset: NetworkAsset
  config: JSON
  createdAt: DateTime
  filters: JSON
  id: String!
  token: NetworkToken
  tokenId: String
  type: RuleConditionType!
  updatedAt: DateTime
  valid: Boolean
}

enum RuleConditionType {
  AnybodiesAsset
  SolanaFungibleAsset
  SolanaNonFungibleAsset
}

type RulePaging {
  data: [Rule!]!
  meta: PagingMeta!
}

type User {
  avatarUrl: String
  createdAt: DateTime
  developer: Boolean
  id: String!
  identities: [Identity!]
  name: String
  profileUrl: String!
  role: UserRole
  status: UserStatus
  updatedAt: DateTime
  username: String
}

input UserCreateBotInput {
  clientId: String!
  clientSecret: String!
  communityId: String!
  token: String!
}

input UserCreateCommunityInput {
  avatarUrl: String
  cluster: NetworkCluster!
  description: String
  discordUrl: String
  githubUrl: String
  name: String!
  telegramUrl: String
  twitterUrl: String
  websiteUrl: String
}

input UserCreateCommunityMemberInput {
  communityId: String!
  role: CommunityRole!
  userId: String!
}

input UserCreateRuleInput {
  communityId: String!
  description: String
  name: String!
}

input UserFindManyCommunityInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input UserFindManyCommunityMemberInput {
  communityId: String!
  limit: Int = 10
  page: Int = 1
  role: CommunityRole
  search: String
}

input UserFindManyIdentityInput {
  username: String!
}

input UserFindManyNetworkTokenInput {
  cluster: NetworkCluster!
  limit: Int = 10
  page: Int = 1
  search: String
  type: NetworkTokenType
}

input UserFindManyRuleInput {
  communityId: String!
  limit: Int = 10
  page: Int = 1
  search: String
}

input UserFindManyUserInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

type UserPaging {
  data: [User!]!
  meta: PagingMeta!
}

enum UserRole {
  Admin
  User
}

enum UserStatus {
  Active
  Created
  Inactive
}

input UserUpdateBotInput {
  avatarUrl: String
  clientId: String
  clientSecret: String
  name: String
  token: String
}

input UserUpdateCommunityInput {
  avatarUrl: String
  description: String
  discordUrl: String
  githubUrl: String
  name: String
  telegramUrl: String
  twitterUrl: String
  websiteUrl: String
}

input UserUpdateCommunityMemberInput {
  role: CommunityRole!
}

input UserUpdateRuleInput {
  description: String
  name: String
}

input UserUpdateUserInput {
  avatarUrl: String
  developer: Boolean
  name: String
}

input VerifyIdentityChallengeInput {
  challenge: String!
  provider: IdentityProvider!
  providerId: String!
  signature: String!
  useLedger: Boolean = false
}
